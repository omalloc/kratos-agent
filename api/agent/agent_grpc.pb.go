// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_ListCluster_FullMethodName      = "/api.agent.Agent/ListCluster"
	Agent_ListService_FullMethodName      = "/api.agent.Agent/ListService"
	Agent_ListServiceGroup_FullMethodName = "/api.agent.Agent/ListServiceGroup"
	Agent_ListKey_FullMethodName          = "/api.agent.Agent/ListKey"
	Agent_GetKey_FullMethodName           = "/api.agent.Agent/GetKey"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// ListCluster 获取集群列表
	//
	// returns a list of clusters
	ListCluster(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterReply, error)
	// ListService 获取服务列表
	//
	// returns a list of services
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error)
	// ListServiceGroup 获取服务分组列表
	//
	// returns a list of group by service.
	ListServiceGroup(ctx context.Context, in *ListServiceGroupRequest, opts ...grpc.CallOption) (*ListServiceGroupReply, error)
	ListKey(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyReply, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) ListCluster(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterReply, error) {
	out := new(ListClusterReply)
	err := c.cc.Invoke(ctx, Agent_ListCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error) {
	out := new(ListServiceReply)
	err := c.cc.Invoke(ctx, Agent_ListService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ListServiceGroup(ctx context.Context, in *ListServiceGroupRequest, opts ...grpc.CallOption) (*ListServiceGroupReply, error) {
	out := new(ListServiceGroupReply)
	err := c.cc.Invoke(ctx, Agent_ListServiceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ListKey(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyReply, error) {
	out := new(ListKeyReply)
	err := c.cc.Invoke(ctx, Agent_ListKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyReply, error) {
	out := new(GetKeyReply)
	err := c.cc.Invoke(ctx, Agent_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// ListCluster 获取集群列表
	//
	// returns a list of clusters
	ListCluster(context.Context, *ListClusterRequest) (*ListClusterReply, error)
	// ListService 获取服务列表
	//
	// returns a list of services
	ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error)
	// ListServiceGroup 获取服务分组列表
	//
	// returns a list of group by service.
	ListServiceGroup(context.Context, *ListServiceGroupRequest) (*ListServiceGroupReply, error)
	ListKey(context.Context, *ListKeyRequest) (*ListKeyReply, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyReply, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) ListCluster(context.Context, *ListClusterRequest) (*ListClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCluster not implemented")
}
func (UnimplementedAgentServer) ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedAgentServer) ListServiceGroup(context.Context, *ListServiceGroupRequest) (*ListServiceGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceGroup not implemented")
}
func (UnimplementedAgentServer) ListKey(context.Context, *ListKeyRequest) (*ListKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKey not implemented")
}
func (UnimplementedAgentServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_ListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ListCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListCluster(ctx, req.(*ListClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ListService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ListServiceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListServiceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ListServiceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListServiceGroup(ctx, req.(*ListServiceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ListKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListKey(ctx, req.(*ListKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCluster",
			Handler:    _Agent_ListCluster_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _Agent_ListService_Handler,
		},
		{
			MethodName: "ListServiceGroup",
			Handler:    _Agent_ListServiceGroup_Handler,
		},
		{
			MethodName: "ListKey",
			Handler:    _Agent_ListKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Agent_GetKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/agent.proto",
}
