// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: agent/agent.proto

package agent

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAgentListCluster = "/api.agent.Agent/ListCluster"
const OperationAgentListService = "/api.agent.Agent/ListService"
const OperationAgentListServiceGroup = "/api.agent.Agent/ListServiceGroup"

type AgentHTTPServer interface {
	// ListCluster ListCluster 获取集群列表
	//
	// returns a list of clusters
	ListCluster(context.Context, *ListClusterRequest) (*ListClusterReply, error)
	// ListService ListService 获取服务列表
	//
	// returns a list of services
	ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error)
	// ListServiceGroup ListServiceGroup 获取服务分组列表
	//
	// returns a list of group by service.
	ListServiceGroup(context.Context, *ListServiceGroupRequest) (*ListServiceGroupReply, error)
}

func RegisterAgentHTTPServer(s *http.Server, srv AgentHTTPServer) {
	r := s.Route("/")
	r.GET("/agent/clusters", _Agent_ListCluster0_HTTP_Handler(srv))
	r.GET("/agent/services", _Agent_ListService0_HTTP_Handler(srv))
	r.GET("/agent/services/group", _Agent_ListServiceGroup0_HTTP_Handler(srv))
}

func _Agent_ListCluster0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentListCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCluster(ctx, req.(*ListClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClusterReply)
		return ctx.Result(200, reply)
	}
}

func _Agent_ListService0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentListService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListService(ctx, req.(*ListServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServiceReply)
		return ctx.Result(200, reply)
	}
}

func _Agent_ListServiceGroup0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServiceGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentListServiceGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServiceGroup(ctx, req.(*ListServiceGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServiceGroupReply)
		return ctx.Result(200, reply)
	}
}

type AgentHTTPClient interface {
	ListCluster(ctx context.Context, req *ListClusterRequest, opts ...http.CallOption) (rsp *ListClusterReply, err error)
	ListService(ctx context.Context, req *ListServiceRequest, opts ...http.CallOption) (rsp *ListServiceReply, err error)
	ListServiceGroup(ctx context.Context, req *ListServiceGroupRequest, opts ...http.CallOption) (rsp *ListServiceGroupReply, err error)
}

type AgentHTTPClientImpl struct {
	cc *http.Client
}

func NewAgentHTTPClient(client *http.Client) AgentHTTPClient {
	return &AgentHTTPClientImpl{client}
}

func (c *AgentHTTPClientImpl) ListCluster(ctx context.Context, in *ListClusterRequest, opts ...http.CallOption) (*ListClusterReply, error) {
	var out ListClusterReply
	pattern := "/agent/clusters"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAgentListCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AgentHTTPClientImpl) ListService(ctx context.Context, in *ListServiceRequest, opts ...http.CallOption) (*ListServiceReply, error) {
	var out ListServiceReply
	pattern := "/agent/services"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAgentListService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AgentHTTPClientImpl) ListServiceGroup(ctx context.Context, in *ListServiceGroupRequest, opts ...http.CallOption) (*ListServiceGroupReply, error) {
	var out ListServiceGroupReply
	pattern := "/agent/services/group"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAgentListServiceGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
